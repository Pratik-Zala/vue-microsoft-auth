<template>
  <div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="relative w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md">
      <!-- Back Button -->
      <BackButton
        v-if="registrationStep === 'otp'"
        @back="goBackToDetails"
      />

      <!-- Registration Form Step -->
      <RegistrationForm
        v-if="registrationStep === 'details'"
        :is-loading="isLoading"
        @submit="handleRegister"
        @microsoft-signup="signUpWithMicrosoft"
      />

      <!-- OTP Verification Step -->
      <OtpVerification
        v-if="registrationStep === 'otp'"
        :email="email"
        :is-loading="isLoading"
        @verify="handleVerificationRegistration"
      />

      <!-- Biometric Setup Step -->
      <BiometricSetup
        v-if="registrationStep === 'biometric'"
        :is-loading="isLoading"
        @setup-biometrics="enableBiometrics"
      />

      <!-- Error Message -->
      <p v-if="error" class="text-sm text-center text-red-500">{{ error }}</p>

      <!-- Login Link -->
      <p v-if="registrationStep !== 'biometric'" class="text-sm text-center">
        Already have an account?
        <router-link to="/login" class="font-medium text-indigo-600 hover:text-indigo-500">
          Login
        </router-link>
      </p>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { MicrosoftSignUpButton, useAuth } from '@twymai/vue-twymx';
import { useRouter } from 'vue-router';
import { notificationService } from '../services/notification.service';
import BackButton from '../components/auth/BackButton.vue';
import RegistrationForm from '../components/auth/RegistrationForm.vue';
import OtpVerification from '../components/auth/OtpVerification.vue';
import BiometricSetup from '../components/auth/BiometricSetup.vue';

const router = useRouter();
const isLoading = ref(false);
const error = ref('');
const registrationStep = ref('details'); // details, otp, biometric
const email = ref('');
const name = ref('');
const password = ref('');

const { registerBiometrics ,sendOtp ,verifyRegistration ,register } = useAuth();

const goBackToDetails = () => {
  registrationStep.value = 'details';
  error.value = '';
};

// const signUpWithMicrosoft = () => {
//   const url = `${import.meta.env.VITE_API_BASE_URL || '/api'}/auth/microsoft`;
//   window.location.href = url;
// };

const signUpWithMicrosoft = () => {
  const url = `${import.meta.env.VITE_API_BASE_URL || '/api'}/auth/microsoft`;
  window.location.href = url;
};

const handleRegister = async (formData) => {
  isLoading.value = true;
  error.value = '';

  // Store form data
  name.value = formData.name;
  email.value = formData.email;
  password.value = formData.password;

  try {
    await sendOtp(email.value)
    // await apiClient.post('/auth/register/send-otp', { email: email.value });
    registrationStep.value = 'otp';
  } catch (err) {
    error.value = err.response?.data?.message || 'Failed to send OTP.';
    console.error(err);
  } finally {
    isLoading.value = false;
  }
};

const handleVerificationRegistration = async () => {
  isLoading.value = true;
  error.value = '';
  try {

    await verifyRegistration(email.value,otp.value);

    // await apiClient.post('/auth/register/verify', {
    //   email: email.value,
    //   otp: otp.value,
    // });

    const response = await register({
      name: name.value,
      email: email.value,
      password: password.value,
    })

    if (response.data && response.data.token) {
      localStorage.setItem('token', response.data.token);
      await notificationService.initialize();
      if (notificationService.fcmToken) {
        response.data.user.fcmToken = notificationService.fcmToken;
      }
      localStorage.setItem('user', JSON.stringify(response.data.user));
      registrationStep.value = 'biometric';
    } else {
      error.value = 'Registration failed: No token received from server.';
    }
  } catch (err) {
    error.value = err.response?.data?.message || 'An error occurred during verification.';
    console.error(err);
  } finally {
    isLoading.value = false;
  }
};

const enableBiometrics = async () => {
  isLoading.value = true;
  error.value = '';
  try {
    const response = await registerBiometrics(email.value);
    // const optionsResponse = await apiClient.post('/auth/webauthn/register/options', { email: email.value });
    // const options = optionsResponse.data;

    // options.challenge = base64UrlToArrayBuffer(options.challenge);
    // options.user.id = base64UrlToArrayBuffer(options.user.id);

    // const credential = await navigator.credentials.create({ publicKey: options });

    // const credentialForServer = {
    //   id: credential.id,
    //   rawId: arrayBufferToBase64Url(credential.rawId),
    //   type: credential.type,
    //   response: {
    //     attestationObject: arrayBufferToBase64Url(credential.response.attestationObject),
    //     clientDataJSON: arrayBufferToBase64Url(credential.response.clientDataJSON),
    //   },
    // };

    // const response = await apiClient.post('/auth/webauthn/register/verify', {
    //   ...credentialForServer,
    //   challengeToken: options.challengeToken,
    //   email: email.value,
    // });

    if (response.data && response.data.success) {
      notificationService.initialize();
      router.push('/');
    } else {
      error.value = 'Biometric registration failed.';
    }

  } catch (err) {
    const message = err.response?.data?.message || err.message || 'Biometric registration failed.';
    error.value = message;
    console.error(err);
    if (err.name === 'NotAllowedError') {
      error.value = 'Biometric registration was cancelled. It is required to proceed.';
    }
  } finally {
    isLoading.value = false;
  }
};
</script>