<template>
   <div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="relative w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md">
      <!-- Back Button -->
      <BackButton
        v-if="loginStep === 'choice' || loginStep === 'otp'"
        @back="handleBackAction"
      />

      <!-- Credentials Step -->
      <CredentialsForm
        v-if="loginStep === 'credentials'"
        :is-loading="isLoading"
        @submit="handleCredentialsSubmit"
        @microsoft-signin="signInWithMicrosoft"
        ref="credentialsForm"
      />

      <!-- Verification Choice Step -->
      <VerificationChoice
        v-if="loginStep === 'choice'"
        @select-method="selectVerificationMethod"
      />

      <!-- OTP Verification Step -->
      <OtpVerification
        v-if="loginStep === 'otp'"
        :email="email"
        :is-loading="isLoading"
        @verify="verifyOtpLogin"
      />

      <!-- Error Message -->
      <p v-if="error" class="text-sm text-center text-red-500">{{ error }}</p>

      <!-- Register Link -->
      <p class="text-sm text-center">
        Don't have an account?
        <router-link to="/register" class="font-medium text-indigo-600 hover:text-indigo-500">
          Register
        </router-link>
      </p>
    </div>
  </div> 
</template>

<script setup>
import { ref } from 'vue';
import { useAuth } from 'vue-microsoft-auth';
import { useRouter } from 'vue-router';
import BackButton from '../components/auth/BackButton.vue';
import CredentialsForm from '../components/auth/CredentialsForm.vue';
import OtpVerification from '../components/auth/OtpVerification.vue';
import VerificationChoice from '../components/auth/VerificationChoice.vue';
import { setUserAttributes, setUserId, trackEvent } from '../services/clarity';
import { notificationService } from '../services/notification.service';

const router = useRouter();
const isLoading = ref(false);
const error = ref('');
const loginStep = ref('credentials');
const email = ref('');
const password = ref('');
const credentialsForm = ref(null);

const{
  login,
  sendOtp,
  verifyBiometrics,
  verifyLogin,
} = useAuth()

const handleBackAction = () => {
  if (loginStep.value === 'choice') {
    loginStep.value = 'credentials';
  } else if (loginStep.value === 'otp') {
    loginStep.value = 'choice';
  }
  error.value = '';
};

const handleCredentialsSubmit = async (credentials) => {
  isLoading.value = true;
  error.value = '';
  email.value = credentials.email;

  try {
    const response = await login(email.value,password.value);

    // const response = await apiClient.post('/auth/login', credentials);

    if (response.data && response.data.success) {
      loginStep.value = 'choice';
    } else {
      error.value = 'Invalid login credentials.';
    }
  } catch (err) {
    error.value = err.response?.data?.message || 'Invalid login credentials.';
    console.error(err);
  } finally {
    isLoading.value = false;
  }
};

const signInWithMicrosoft = () => {
  const url = `${import.meta.env.VITE_API_BASE_URL || '/api'}/auth/microsoft`;
  window.location.href = url;
};

const selectVerificationMethod = async (method) => {
  try {
    error.value = '';
    if (method === 'email') {
      isLoading.value = true;
      await sendOtp(email.value);
      // await apiClient.post('/auth/login/send-otp', { email: email.value });
      loginStep.value = 'otp';
    } else if (method === 'biometric') {
      isLoading.value = true;
      error.value = '';

      const response = await verifyBiometrics(email.value);

      if (response.data && response.data.token) {
        localStorage.setItem('token', response.data.token);
        await notificationService.initialize();

        if (notificationService.fcmToken) {
          response.data.user.fcmToken = notificationService.fcmToken;
        }
        localStorage.setItem('user', JSON.stringify(response.data.user));

        // Track user in Microsoft Clarity
        setUserId(response.data.user.id || response.data.user.email);
        setUserAttributes({
          email: response.data.user.email,
          name: response.data.user.name || response.data.user.displayName,
          loginMethod: 'biometric'
        });
        trackEvent('user_login', { method: 'biometric' });

        router.push('/');
      } else {
        error.value = 'Verification failed.';
      }
    }
  } catch (err) {
    const message = err.response?.data?.message || err.message || 'Verification failed.';
    error.value = message;
    console.error(err);
    if (err.name === 'NotAllowedError') {
      loginStep.value = 'choice';
    }
  } finally {
    isLoading.value = false;
  }
};

const verifyOtpLogin = async (otp) => {
  isLoading.value = true;
  error.value = '';
  try {

    const response = await verifyLogin({
      email: email.value,
      otp: otp,
    });

    if (response.data && response.data.token) {
      localStorage.setItem('token', response.data.token);
      await notificationService.initialize();
      if (notificationService.fcmToken) {
        response.data.user.fcmToken = notificationService.fcmToken;
      }
      localStorage.setItem('user', JSON.stringify(response.data.user));

      // Track user in Microsoft Clarity
      setUserId(response.data.user.id || response.data.user.email);
      setUserAttributes({
        email: response.data.user.email,
        name: response.data.user.name || response.data.user.displayName,
        loginMethod: 'otp'
      });
      trackEvent('user_login', { method: 'otp' });

      router.push('/');
    } else {
      error.value = 'Login failed: No token received from server.';
    }
  } catch (err) {
    error.value = err.response?.data?.message || 'Invalid OTP.';
    console.error(err);
  } finally {
    isLoading.value = false;
  }
};
</script>