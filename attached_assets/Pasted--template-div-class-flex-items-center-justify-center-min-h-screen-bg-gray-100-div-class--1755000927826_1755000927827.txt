<template>
  <div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="relative p-8 max-w-md w-full  space-y-4 bg-white rounded-lg shadow-md text-center">
      <button @click="goBack" type="button"
        class="absolute top-6 left-6 text-gray-500 hover:text-gray-800">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      <div v-if="authStep === 'microsoft'">
        <h2 class="text-xl font-bold text-gray-900">Authenticating with Microsoft...</h2>
        <Loader v-if="!error" />
      </div>
      
      <div v-if="authStep === 'biometricChoice'">
        <h2 class="text-xl font-bold text-gray-900">Biometric Verification</h2>
        <p class="mt-2 text-gray-600">Please verify your identity to complete the login.</p>
        <div class="mt-6">
          <button @click="verifyWithBiometrics" :disabled="isLoading" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">

            {{ isLoading ? 'Verifying...' : 'Verify with Biometrics' }}
          </button>
        </div>
        <div class="mt-6">
          <button @click="authStep='email'" :disabled="isLoading" class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
            Continue with OTP
          </button>
        </div>
      </div>
      <div v-if="authStep === 'email'">
        <h2 class="text-2xl font-bold text-center text-gray-900">Enter Email Address<address></address></h2>
        <form @submit.prevent="handleSendMail" class="mt-8 space-y-6">
           <div>
            <label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
            <div class="mt-1">
              <input type="email" id="email" v-model="userEmail" required
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            </div>
          </div>
          <div class="space-y-4">
            <button type="submit" :disabled="isLoading"
              class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50">
              {{ isLoading ? 'Verifying...' : 'Verify' }}
            </button>
          </div>
        </form>
      </div>

      <div v-if="authStep === 'otp'">
        <h2 class="text-2xl font-bold text-center text-gray-900">Enter OTP</h2>
        <p class="text-center text-sm text-gray-600 mt-2">
          An OTP has been sent to {{ email }}.
        </p>
        <form @submit.prevent="verifyOtpLogin" class="mt-8 space-y-6">
          <div>
            <label for="otp" class="block text-sm font-medium text-gray-700">One-Time Password</label>
            <div class="mt-1">
              <input type="text" id="otp" v-model="otp" required
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            </div>
          </div>
          <div class="space-y-4">
            <button type="submit" :disabled="isLoading"
              class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50">
              {{ isLoading ? 'Verifying...' : 'Verify' }}
            </button>
          </div>
        </form>
      </div>

      <div v-if="authStep === 'biometricRegistration'">
        <h2 class="text-2xl font-bold text-center text-gray-900">Set up Biometric Login</h2>
        <p class="text-center text-sm text-gray-600 mt-2">
          Secure your account and log in faster with biometrics.
        </p>
        <div class="mt-8 space-y-4">
          <button @click="registerBiometrics" :disabled="isLoading"
            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50">
            {{ isLoading ? 'Setting up...' : 'Enable Biometrics' }}
          </button>
        </div>
      </div>

      <p v-if="error" class="text-red-500">{{ error }}</p>
    </div>
  </div>
</template>

<script setup>
import { setUserId, setUserAttributes, trackEvent } from '../services/clarity';

import { ref, onMounted } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import apiClient from '../services/api';
import Loader from '../components/Loader.vue';
import { notificationService } from '../services/notification.service';

const route = useRoute();
const router = useRouter();
const error = ref('');
const authStep = ref('microsoft'); // 'microsoft', 'biometricChoice', 'biometricRegistration'
const isLoading = ref(false);
const userEmail = ref('');
const otp=ref('');
const goBack = () => {
  if(authStep.value == 'microsoft') router.push('/login');
  else if(authStep.value == 'biometricChoice') router.push('/microsoft')
  else if(authStep.value == 'biometricRegistration') router.push('/biometricChoice')
  else if(authStep.value == 'email') router.push('/biometricChoice')  
  else if(authStep.value == 'otp') router.push('/email')
};

// WebAuthn helpers
const base64UrlToArrayBuffer = (base64url) => {
  const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');
  const binStr = atob(base64);
  const len = binStr.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binStr.charCodeAt(i);
  }
  return bytes.buffer;
};

const arrayBufferToBase64Url = (buffer) => {
  const bytes = new Uint8Array(buffer);
  let binStr = '';
  bytes.forEach((byte) => {
    binStr += String.fromCharCode(byte);
  });
  const base64 = btoa(binStr);
  return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
};


onMounted(async () => {
  const code = route.query.code;

  if (!code) {
    error.value = 'Authentication failed: No authorization code provided.';
    setTimeout(() => router.push('/login'), 3000);
    return;
  }

  try {
    const response = await apiClient.post('/auth/microsoft/token', { code });

    if (response.data && response.data.user && response.data.user.email) {
      userEmail.value = response.data.user.email;
      if (response.data.isNewUser) {
        // New user: Store token and proceed to biometric registration
        localStorage.setItem('token', response.data.token);
        localStorage.setItem('user', JSON.stringify(response.data.user));
        authStep.value = 'biometricRegistration';
      } else {
        // Existing user: Proceed to biometric login verification
        authStep.value = 'biometricChoice';
      }
    } else {
      error.value = 'Authentication failed: Could not retrieve user details from server.';
      setTimeout(() => router.push('/login'), 3000);
    }
  } catch (err) {
    error.value = err.response?.data?.message || 'An error occurred during Microsoft authentication.';
    console.error(err);
    setTimeout(() => router.push('/login'), 3000);
  }
});

const verifyWithBiometrics = async () => {
  isLoading.value = true;
  error.value = '';
  try {
      const optionsResponse = await apiClient.post('/auth/webauthn/login/options', { email: userEmail.value });
      const options = optionsResponse.data;

      options.challenge = base64UrlToArrayBuffer(options.challenge);
      if (options.allowCredentials) {
        for (const cred of options.allowCredentials) {
          cred.id = base64UrlToArrayBuffer(cred.id);
        }
      }

      const credential = await navigator.credentials.get({ publicKey: options });

      const credentialForServer = {
        id: credential.id,
        rawId: arrayBufferToBase64Url(credential.rawId),
        type: credential.type,
        response: {
          authenticatorData: arrayBufferToBase64Url(credential.response.authenticatorData),
          clientDataJSON: arrayBufferToBase64Url(credential.response.clientDataJSON),
          signature: arrayBufferToBase64Url(credential.response.signature),
          userHandle: credential.response.userHandle ? arrayBufferToBase64Url(credential.response.userHandle) : null,
        },
      };

      const response = await apiClient.post('/auth/webauthn/login/verify', {
        email: userEmail.value,
        data: credentialForServer,
        challengeToken: options.challengeToken
      });

      if (response.data && response.data.token) {
        localStorage.setItem('token', response.data.token);
        await notificationService.initialize();
        if (notificationService.fcmToken) {
          response.data.user.fcmToken = notificationService.fcmToken;
        }
        localStorage.setItem('user', JSON.stringify(response.data.user));
        router.push('/');
      } else {
        error.value = 'Verification failed.';
        setTimeout(() => router.push('/login'), 3000);
      }
  } catch (err) {
    const message = err.response?.data?.message || err.message || 'Verification failed.';
    error.value = message;
    console.error(err);
    setTimeout(() => router.push('/login'), 3000);
  } finally {
    isLoading.value = false;
  }
};

const verifyOtpLogin = async () => {
  isLoading.value = true;
  error.value = '';
  try {
    const response = await apiClient.post('/auth/login/verify', {
      email: userEmail.value,
      otp: otp.value,
    });

    if (response.data && response.data.token) {
      localStorage.setItem('token', response.data.token);
      await notificationService.initialize();
      if (notificationService.fcmToken) {
        response.data.user.fcmToken = notificationService.fcmToken;
      }
      localStorage.setItem('user', JSON.stringify(response.data.user));
      
      // Track user in Microsoft Clarity
      setUserId(response.data.user.id || response.data.user.email);
      setUserAttributes({
        email: response.data.user.email,
        name: response.data.user.name || response.data.user.displayName,
        loginMethod: 'otp'
      });
      trackEvent('user_login', { method: 'otp' });
      
      router.push('/');
    } else {
      error.value = 'Login failed: No token received from server.';
    }
  } catch (err) {
    error.value = err.response?.data?.message || 'Invalid OTP.';
    console.error(err);
  } finally {
    isLoading.value = false;
  }
}

const registerBiometrics = async () => {
  isLoading.value = true;
  error.value = '';
  try {
    const optionsResponse = await apiClient.post('/auth/webauthn/register/options', { email: userEmail.value });
    const options = optionsResponse.data;

    options.challenge = base64UrlToArrayBuffer(options.challenge);
    options.user.id = base64UrlToArrayBuffer(options.user.id);

    const credential = await navigator.credentials.create({ publicKey: options });

    const credentialForServer = {
      id: credential.id,
      rawId: arrayBufferToBase64Url(credential.rawId),
      type: credential.type,
      response: {
        attestationObject: arrayBufferToBase64Url(credential.response.attestationObject),
        clientDataJSON: arrayBufferToBase64Url(credential.response.clientDataJSON),
      },
    };

    const response = await apiClient.post('/auth/webauthn/register/verify', {
      ...credentialForServer,
      challengeToken: options.challengeToken,
      email: userEmail.value,
    });

    if (response.data && response.data.success) {
      notificationService.initialize();
      
      router.push('/');
    } else {
      error.value = 'Biometric registration failed.';
      setTimeout(() => router.push('/'), 3000);
    }
  } catch (err) {
    const message = err.response?.data?.message || err.message || 'Biometric registration failed.';
    error.value = message;
    console.error(err);
    if (err.name === 'NotAllowedError') {
      error.value = 'Biometric registration was cancelled. To continue, you must complete this step. Please log in again to restart the process.';
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      setTimeout(() => router.push('/login'), 4000);
    } else {
      setTimeout(() => router.push('/login'), 3000);
    }
  } finally {
    isLoading.value = false;
  }
};


const handleSendMail = async (method) => {
  try {
    error.value = '';
    isLoading.value = true;
      await apiClient.post('/auth/login/send-otp', { email: email.value });
      authStep.value = 'otp';
  } catch (err) {
    const message = err.response?.data?.message || err.message || 'Verification failed.';
    error.value = message;
    console.error(err);
    if (err.name === 'NotAllowedError') {
      authStep.value = 'microsoft';
    }
  } finally {
    isLoading.value = false;
  }
};

</script> 